.template 0
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# Authors:
# Caner Candan <caner@candan.fr>, http://caner.candan.fr
#

function global.string__first_char(value)
  return string.substr(my.value, 0, 0)
endfunction

function string__test__first_char
  return global.string__first_char("hello") = "h"
endfunction

function global.string__is_empty(value)
  return ((my.value ? "") = "")
endfunction

function string__test__is_empty_false
  return global.string__is_empty("hello") = 0
endfunction

function string__test__is_empty_true
  return global.string__is_empty("") = 1
endfunction

function string__test__is_empty_none
  return global.string__is_empty() = 1
endfunction

function global.string__last_char(value)
  my.position = string.length(my.value)
  my.character = string.substr(my.value, my.position-1, my.position)
  return my.character
endfunction

function string__test__last_char
  echo global.string__last_char("hello")
  return global.string__last_char("hello") = "o"
endfunction

function global.string__rename(name)
  my.s = string.trim("$(my.Name)")
  my.s = string.replace(my.s, " |")
  my.s = string.replace(my.s, "-|")
  my.s = string.replace(my.s, "_|")
  my.s = string.replace(my.s, "'|")
  return my.s
endfunction

function string__test__rename_hello_world
  return global.string__rename(" hel'lo-wor_ld ") = "HelLoWorLd"
endfunction

function global.string__identity(name)
  my.s = string.trim("$(my.name)")
  my.s = string.replace(my.s, " |_")
  my.s = string.replace(my.s, "-|_")
  my.s = string.replace(my.s, "'|_")
  return my.s
endfunction

function string__test__identity_hello_world
  return global.string__identity(" hel'lo-wor_ld ") = "_hel_lo_wor_ld"
endfunction

function global.string__fill(c, n)
  my.s = ""
  my.__count = 0
  while my.__count < my.n
    my.s += "$(my.c)"
    my.__count += 1
  endwhile
  return my.s
endfunction

function string__test__fill_whitespaces
  return global.string__fill(' ', 10) = "          "
endfunction

function global.string__dummy_print(msg)
  echo my.msg
endfunction

function for_each_item_callback(callback, prefix, arg1, arg2, arg3, arg4)
  if defined(my.arg4)
    $(my.callback)(my.prefix, my.arg1, my.arg2, my.arg3, my.arg4)
  elsif defined(my.arg3)
    $(my.callback)(my.prefix, my.arg1, my.arg2, my.arg3)
  elsif defined(my.arg2)
    $(my.callback)(my.prefix, my.arg1, my.arg2)
  elsif defined(my.arg1)
    $(my.callback)(my.prefix, my.arg1)
  else
    $(my.callback)(my.prefix)
  endif
endfunction

function global.string__for_each_item(pattern, callback, delim, arg1, arg2, arg3, arg4)
  my.delim ?= '|'
  my.callback ?= 'dummy_print'
  my.remaining = my.pattern
  
  while string.cntch(my.remaining, my.delim)
    my.prefix = string.prefix(my.remaining, my.delim)
    for_each_item_callback(my.callback, my.prefix, my.arg1, my.arg2, my.arg3, my.arg4)
    my.remaining = string.substr(my.remaining, string.length(my.prefix)+1)
  endwhile
  
  for_each_item_callback(my.callback, my.remaining, my.arg1, my.arg2, my.arg3, my.arg4)
endfunction

function global.string__get_variable(str)
  my.var_begin = '#('
  my.var_end = ')'
  my.res = XML.new()
  if !defined(string.locate(my.str, my.var_begin))
    define my.res.found = 0
    return my.res
  endif
  my.start = string.locate(my.str, my.var_begin)+string.length(my.var_begin)
  my.str = string.substr(my.str, my.start)
  if !defined(string.locate(my.str, my.var_end))
    define my.res.found = 0
    return my.res
  endif
  my.end = string.locate(my.str, my.var_end)-1
  my.var = string.substr(my.str, 0, my.end)
  define my.res.found = 1
  define my.res.remaining = my.str
  define my.res.var = my.var
  return my.res
endfunction

function global.string__convert_variables(str, baseobj)
  while 1
    my.res = string__get_variable(my.str)
    if !my.res.found
      last
    endif
    if defined(my.baseobj) & defined(my.baseobj.$(my.res.var))
      my.var = my.baseobj.$(my.res.var)
    else
      my.var = $(my.res.var)
    endif
    my.str = string.replace(my.str, '#(' + my.res.var + ')|' + my.var)
  endwhile
  return my.str
endfunction

function string__test__conv_glob_var_easy
  my_var = "my_value"
  return string__convert_variables("#(my_var)") = "my_value"
endfunction

function string__test__conv_glob_var_hard
  my_var = "my_value"
  return string__convert_variables("my_dir/#(my_var)/my_subdir") = "my_dir/my_value/my_subdir"
endfunction

function string__test__conv_ctx_var_easy
  my.var = "my_value"
  return string__convert_variables("#(var)", my) = "my_value"
endfunction

.endtemplate